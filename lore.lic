=begin

Script: 		Lore
Author: 		WilliamW1979 (WilliamW1979@netscape.net)
Game:			Gemstone
Date: 			August 25, 2017
Version: 		2.4
Description: 		LoreSing to an object in your right hand, gives results at the end!
Commands: 		;lore help (usage and options)
What script does:	It has automated loresinging, even a whisper feature to give data to people, logging feature so you can get data later from other characters, and a silent mode so you don't see your own singing.

Update history

2.4
Bug fixes

2.3
fput was locking up script, fixed problem using dothistimeout instead

2.2
Fixed some minor issues.

2.1
Change the right hand to detect only if you are singing to an object.

2.0
Added a whisper feature so you can whisper the details to someone you are loresinging to and it works with autolore script now!

1.84
Got rid of the settings.lic file to be used and started using UserVars in its place for a better solution!

1.83
Weird bugs for some reason needed fixing. Stopped working at one point, so fixed the errors!

1.82
Upgrading to utilities messed up some variables I had to fix to enable silent mode to work again.

1.81
Fixed some bugs (Changed number commands to reflect which verse singing (0 is all now instead of 1).

1.8
Upgraded script to have universal settings file for easy upgrading for future updates!

1.7
Added the settings class to allow for cross-script compatibility. A special setting file is created for each character individually that can be used for all scripts I create!

1.6
Added a treat!

1.5
updated silent loresinging so others hear that you are speaking bard and not common.

1.4
Added more features to the logging ability and changed made a few detects for trust so no errors should come up

1.3
Added LOG command to enable and disable logging
Removed SEEALL command, now Silence / Silent will take a second variale of on or off.

1.2
Added a logging feature (needs to be trusted to work) This logging feature will allow future scripts to access the data as it stores all singing attempts based on name and id

1.1
Added silent feature using SILENCE and SEEALL commands

1.0
First version made which as a basic loresinging script

=end

object = nil

Silent = false
Enable_Logs = true

ResultAbility = nil
ResultEnhance = nil
ResultPurpose = nil
ResultValue = nil

def SingLore(var)
	loretype = [", please tell me and tell me true,;What might be your own value?", " I am listening and it is all coming clear,;But your purpose is what I would most like to hear.", " it will be helpful for me to know,;What enhance within will you now show?", ", from my ears and eyes you have nothing to hide,;What special ability do you hold inside?"]
	Script.current.want_downstream_xml = true
	results = []
	reading_results = false
	dothistimeout "loresing #{$object}#{loretype[var]}", 15, /^Roundtime:/
	while line = get
		case line
		when /you learn something about it...$|in your hand...$/
			reading_results = true
		when /<prompt|you previously learned|reached the end|without sufficient power|You open your mouth, but find yourself unable to sing|glean more/
			break
		else
			if reading_results
				result_line = line.gsub(/<.*>([\w' ]+)<\/.*>/, '\1').strip
				results.push result_line
			end
		end
	end
	Script.current.want_downstream_xml = false
	results.join(" ")
end

class Lore

	attr_accessor :type, :objectname, :objectid

	def initialize()
		silence_me
		$ResultValue = nil
		$ResultPurpose = nil
		$ResultEnhance = nil
		$ResultAbility = nil
		$Silent = UserVars.Lore_Silent
		if UserVars.list.include? "Lore_Logs"
			$Enable_Logs = UserVars.Lore_Logs
		end
		@objectname = GameObj.right_hand.name
		@objectid = GameObj.right_hand.id
		$object = GameObj.right_hand.noun
		load_data
		unless $SAFE == 0
			$Enable_Logs = false
		end
	end

	LoreSilent = proc{ |sing_level|
		action = proc { |server_string|
			case server_string
			when /^You are now speaking Guildspeak.$/
				@squelch = true && @Silent
			when /^You are now speaking Common.$/
				@squelch = false
			else
				if @squelch
					nil
				else
					server_string
				end
			end
		}
		if $Silent == true
			DownstreamHook.add("Lore_LoreSilent", action)
			before_dying {DownstreamHook.remove "Lore_LoreSilent"}
		end
		fput "speak bard"
		case sing_level
		when 0
			$ResultValue = SingLore(0)
		when 1
			$ResultPurpose = SingLore(1)
		when 2
			$ResultEnhance = SingLore(2)
		when 3
			$ResultAbility = SingLore(3)
		when 4
			$ResultAbility = SingLore(3)
			$ResultEnhance = SingLore(2)
			$ResultPurpose = SingLore(1)
			$ResultValue = SingLore(0)
		end
		fput "speak common"
	}

	def print_help
		respond
		respond "Place the object in your right hand you want to loresing!"
		respond
		respond "      COMMANDS                               DESCRIPTION"
		respond
		respond ";lore all or ;lore 0                   Loresing EVERYTHING (All verses in order)"
		respond ";lore value or ;lore 1                 Loresing Value Only (verse 1)"
		respond ";lore purpose or ;lore 2               Loresing Purpose Only (verse 2)"
		respond ";lore enhance or ;lore 3               Loresing enhance Only (verse 3)"
		respond ";lore ability or ;lore 4               Loresing Ability Only (verse 4)"
		respond
		respond ";lore                                  If logging is enabled and there is a log, will pull log or else it will sing all 4 types!"
		respond
		respond "                            OPTIONS"
		respond
		respond ";lore log=[on/off/true/false]          Enable/Disable logging (off by default)"
		respond ";lore silence=[on/off/true/false]      Hide/See singing (on by default)"
		respond ";lore silent=[on/off/true/false]       Hide/See singing (on by default)"
		respond ";lore whisper=[PERSON]                 Whispers details to person of object already sung to in right hand (Requires logging)."
		respond
		respond
		respond 'Please note, there is a script called "AUTOLORE" that will automatically run this script for mass loresinging'
		respond
	end

	def command
		if Stats.prof != "Bard"
			if ($ResultValue || $ResultPurpose || $ResultAbility || $ResultEnhance)
				respond
				respond
				respond "Displaying previously sung data!"
				display_data
			end
			exit
		end
		whisper_target = nil
		args = Script.current.vars[0]
		case args
		when /0|all|^$/
			if GameObj.right_hand.name == "Empty" then respond; respond; respond "Can't loresing to an empty hand silly!"; respond; respond; exit end
			LoreSilent.call 4
		when /1|value/
			if GameObj.right_hand.name == "Empty" then respond; respond; respond "Can't loresing to an empty hand silly!"; respond; respond; exit end
			LoreSilent.call 0
		when /2|purpose/
			if GameObj.right_hand.name == "Empty" then respond; respond; respond "Can't loresing to an empty hand silly!"; respond; respond; exit end
			LoreSilent.call 1
		when /3|enhance/
			if GameObj.right_hand.name == "Empty" then respond; respond; respond "Can't loresing to an empty hand silly!"; respond; respond; exit end
			LoreSilent.call 2
		when /4|ability/
			if GameObj.right_hand.name == "Empty" then respond; respond; respond "Can't loresing to an empty hand silly!"; respond; respond; exit end
			LoreSilent.call 3
		end
		if args =~ /whisper\s*=\s*(?<name>[\w']+)/
			whisper_target = $~[:name]
		end
		if args =~ /silence|silent\s*=\s*(?<on>on|true)?(?<off>off|false)?/
			if $~[:on]
				UserVars.change("Lore_Silent", true)
				UserVars.save
				respond
				respond "Silent Mode is now active!"
				respond
			elsif $~[:off]
				UserVars.change("Lore_Silent", false)
				UserVars.save
				respond
				respond "Silent Mode is now deactive!"
				respond
			end
		end
		if args =~ /virgins/
			respond
			respond "You have discovered the hidden command!"
			respond
			fput "sing A dragon has come to our village today.;We've asked him to leave, but he won't go away.;Now he's talked to our king and they worked out a deal.;No homes will he burn and no crops will he steal."
			pause 7
			fput "sing Now there is but one catch, we dislike it a bunch.;Twice a year he invites him a virgin to lunch.;Well, we've no other choice, so the deal we'll respect.;But we can't help but wonder and pause to reflect."
			pause 7
			fput "sing Do virgins taste better than those who are not?;Are they salty, or sweeter, more juicy or what?;Do you savor them slowly? Gulp them down on the spot?;Do virgins taste better than those who are not?"
			pause 7
			fput "sing Now we'd like to be shed you, and many have tried.;But no one can get through your thick scaly hide.;We hope that some day, some brave knight will come by.;'Cause we can't wait around 'til you're too fat to fly."
			pause 7
			fput "sing Now you have such good taste in your women for sure,;They always are pretty, they always are pure.;But your notion of dining, it makes us all flinch,;For your favorite entree is barbecued wench."
			pause 7
			fput "sing Now we've found a solution, it works out so neat,;If you insist on nothing but virgins to eat.;No more will our number ever grow small,;We'll simply make sure there's no virgins at all!"
		end

		clamped_whisper = proc {|tgt, line|
			max_length = 512
			if line.length < max_length
				fput "whisper ooc #{tgt} #{line}"
			else
				sentences = line.split /\.( |^)/
				new_line = ''
			  sentences.each {|sentence|
					sentence.strip!
					if !sentence.empty? && new_line.length + sentence.length < max_length
						new_line = "#{new_line}#{sentence.strip}. "
					else
						if !new_line.empty?
							fput "whisper ooc #{tgt} #{new_line}"
						end
						new_line = sentence
					end
				}
			end
		}

		if whisper_target
			fput "whisper ooc #{whisper_target} About your #{objectname}:"
			if $ResultValue
				clamped_whisper.call whisper_target, $ResultValue
			end
			if $ResultPurpose
				clamped_whisper.call whisper_target, $ResultPurpose
			end
			if $ResultEnhance
				clamped_whisper.call whisper_target, $ResultEnhance
			end
			if $ResultAbility
				clamped_whisper.call whisper_target, $ResultAbility
			end
		end

		if $Enable_Logs == true then log end
		display_data
	end

	def log
		basedir = "#{$lich_dir}logs/"
		directory = basedir + "#{XMLData.game}-Lore/"
		Dir.mkdir(basedir) unless File.exists?(basedir)
		Dir.mkdir(directory) unless File.exists?(directory)
		begin
			if File.exists?("#{directory}#{@objectname}-#{@objectid}.txt")
				my_file = File.open("#{directory}#{@objectname}-#{@objectid}.txt", "w+")
			else
				my_file = File.new("#{directory}#{@objectname}-#{@objectid}.txt", "w")
			end
			my_file.write("Object Name:#{GameObj.right_hand.name}\n")
			my_file.write("Object ID:#{GameObj.right_hand.id}\n")
			if $ResultValue
				my_file.write("Value:#{$ResultValue}\n")
			end
			if $ResultPurpose
				my_file.write("Purpose:#{$ResultPurpose}\n")
			end
			if $ResultEnhance
				my_file.write("Enhance:#{$ResultEnhance}\n")
			end
			if $ResultAbility
				my_file.write("Ability:#{$ResultAbility}\n")
			end
			my_file.close
		rescue Exception => msg
			respond "Could not write loresong to log file!"
		end
	end

	def display_data
		respond
		respond
		respond "Object Name: #{@objectname}"
		respond "Object ID: #{@objectid}"
		respond
		unless $ResultValue.nil? then respond "Value: #{$ResultValue}" end
		unless $ResultPurpose.nil? then respond "Purpose: #{$ResultPurpose}" end
		unless $ResultEnhance.nil? then respond "Enhancive: #{$ResultEnhance}" end
		unless $ResultAbility.nil? then respond "Ability: #{$ResultAbility}" end
		respond
		respond
	end

	def load_data
		basedir = "#{$lich_dir}logs/"
		directory = basedir + "#{XMLData.game}-Lore/"
		begin
			if File.exists?("#{directory}#{@objectname}-#{@objectid}.txt")
				datafile = File.open("#{directory}#{@objectname}-#{@objectid}.txt", "r")
				while (line = datafile.gets)
					if line.include?("Value:")
						data = line.gsub("Value:", "")
						data.delete!("\n")
						$ResultValue = data;
					elsif line.include?("Purpose:")
						data = line.gsub("Purpose:", "")
						data.delete!("\n")
						$ResultPurpose = data;
					elsif line.include?("Enhance:")
						data = line.gsub("Enhance:", "")
						data.delete!("\n")
						$ResultEnhance = data;
					elsif line.include?("Ability:")
						data = line.gsub("Ability:", "")
						$ResultAbility = data;
					end
				end
				datafile.close
			end
		rescue Exception => msg
			respond "Failed to load log data."
		end
	end
end

sing = Lore.new
sing.command
