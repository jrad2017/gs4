=begin
Script for hunting with Ericos et al.
=end

#These people are always considered part of the group, regardless of membership
@core_group = ["Ericos", "Predest", "Alyssea", "Archaeron", "Draccor", "Naina", "Szyxt"]
#Default set of NPC types to consider attack
@target_types = /aggressive npc|undead|bandit|grimswarm/
#Default set of NPCs to target
@valid_targets = //

@script_name = script.name

def name
	#Function to get active character name
	Char.name
end

def get_current_group
	#Get members of current group
	group = [name]
	fput "group"
	while line = get
		case line
		when /(?<name>\w+) is following|(?<name>\w+) is also a member|(?<name>\w+) is the leader/
			group.push($~[:name])
		when /Your group status/
			break
		end
	end
	group
end

@group_mutex = Mutex.new
@vars_mutex = Mutex.new

@group_mutex.synchronize {
	@current_group = get_current_group
}

def poaching?
	#Test if someone in the room is unexpected, to avoid poaching
	#Get minimal list of names to care about
	pcs = Set.new @core_group
	@group_mutex.synchronize {
		pcs.merge @current_group
	}
	party_members = Regexp.new pcs.to_a.join("|")
	#Also check disk names against party members
	GameObj.pcs.any? {|pc| pc.name !~ party_members} || GameObj.loot.any? {|obj| obj.noun == "disk" && obj.name !~ party_members}
end

def change_stance new_stance, force: true
	#return unless new_stance =~ /off/ # pookahs/bog
	return if Spell[1617].active? || Spell[216].active? || dead?
	return if checkstance(new_stance)
	return if checkcastrt > 0 && new_stance =~ /def/ && checkstance("guarded")

	if force
		result = dothistimeout "stance #{new_stance}", 3, /You are now in an?|Cast Round Time in effect|You are unable to change/
	else
		put "stance #{new_stance}"
	end
end

def stand
	#Goes defensive, then stands
	until(standing?)
		change_stance('defensive')
		fput 'stand'
	end
end

def is_valid_target npc, valid_targets:@valid_targets, target_types:@target_types
  #Function which determines if an NPC is a valid target for combat
  npc.name =~ valid_targets and npc.status !~ /dead|gone/i and npc.type =~ target_types
end

def maintain_spells spells, min_mana: -1, max_mana: -1
  #Ensures that all given spells are active, and casts to refresh them, assuming spells are affordable.
  return if spells.all? {|spell| spell.active?}
  return if min_mana >= 0 and checkmana <= min_mana
  return if max_mana >= 0 and checkmana >= max_mana

  spells.each { |spell|
    if spell.known? and spell.affordable? and !spell.active?
      waitcastrt?
      spell.cast
      waitcastrt?
    end
  }
end

def cmd_gos
  sigils = [Spell[9705], Spell[9707], Spell[9708], Spell[9710]]
	maintain_spells sigils, min_mana: 15
end

def cmd_power
  power = [Spell[9718]]
  maintain_spells power, max_mana: 100
  # Pause to ensure lich can track stamina/mana
  pause 0.5
end

def cmd_col
  signs = [Spell[9904], Spell[9907], Spell[9908], Spell[9912], Spell[9913]]
  maintain_spells signs, min_mana: 5
end

def cmd_voln
  symbols = [Spell[9805], Spell[9806]]
  maintain_spells symbols
end

def cmd_smastery
  #Check if cooldown is in effect
  return if Spell[9604].active?
  maintain_spells [Spell[9603]]
end

def cmd_fury target
	return unless Spell[635].known? and Spell[635].affordable?
	return if checkmana <= 45
	return if(hiding?)
	return if GameObj.npcs.count { |npc| is_valid_target npc } < 5

	waitcastrt?
	Spell[635].cast "##{target.id}"
	change_stance('guarded')
	waitcastrt?
end

def cmd_spike target
	return if target.status =~ /dead|gone/
	return if checkmana <= 32
	return if(hiding?)
	return unless Spell[616].known? and Spell[616].affordable?
	
	waitcastrt?
	Spell[616].cast "##{target.id}"
	change_stance('guarded')
	waitcastrt?
	
end

def cmd_swarm target
	return if target.status =~ /dead|gone/
	return if target.status =~ /kneel|sit|lying|stunned/
	return if GameObj.loot.find { |loot| loot.name =~ /swarm$|vine$/ }
	return unless Spell[615].known? and Spell[615].affordable?
	return if target.name =~ /lava golem|skayl|banshee|stone troll|stone giant/i
	return if checkmana <= 140
	return if(hiding?)

	waitcastrt?
	change_stance('offensive')
	Spell[615].cast "##{target.id}"
	change_stance('guarded')
	waitcastrt?
end

def cmd_weed target
	return if target.status =~ /dead|gone/
	return if target.status =~ /kneel|sit|lying|stunned/
	#TODO: Make this more intelligent about detecting enemy vines
	return if GameObj.loot.find { |loot| loot.name =~ /swarm$|vine$/ }
	return unless Spell[610].known? and Spell[610].affordable?
	return if target.name =~ /lava golem|skayl|banshee/i
	return if checkmana <= 140
	return if(hiding?)

	waitcastrt?
	change_stance('offensive')
	Spell[610].cast "##{target.id}"
	change_stance('guarded')
	waitcastrt?
end

def cmd_sounds target
	return if target.status =~ /dead|gone/
	return unless Spell[607].known? and Spell[607].affordable?

	waitcastrt?
	Spell[607].cast "##{target.id}"
	waitcastrt?
end

def cmd_camo target
	return if(hiding?)
	return if target.status =~ /dead|gone/
  maintain_spells [Spell[608]], min_mana: 40
end

def cmd_hide target
	return if(hiding?)
	return if target.status =~ /dead|gone/
	fput "hide"
	waitrt?
	if matchtimeout 1, "You attempt to blend with the surroundings"
		sleep 0.1
	end
end

def cmd_ambush target
	return if target.status =~ /dead|gone/

	change_stance('offensive')
	if target.status =~ /kneel|sit|lying|stunned/
		result = dothistimeout( "ambush ##{target.id} head", 2, /You leap|You cannot|does not have a|already missing|Could not find|seconds/ )
		if( result =~ /You cannot|already missing/ )
			result = dothistimeout( "ambush ##{target.id} right leg", 2, /You leap|You cannot|does not have a|already missing|Could not find|seconds/ )
			if( result =~ /does not have a|already missing/ )
				result = dothistimeout( "ambush ##{target.id} left leg", 2, /You leap|You cannot|does not have a|already missing|Could not find|seconds/ )
				if( result =~ /does not have a|already missing/ )
					fput "ambush ##{target.id} head"
				end
			end
		end
	else
		result = dothistimeout( "ambush ##{target.id} right leg", 2, /You leap|You cannot|does not have a|already missing|Could not find|seconds/ )
		if( result =~ /does not have a|already missing/ )
			result = dothistimeout( "ambush ##{target.id} left leg", 2, /You leap|You cannot|does not have a|already missing|Could not find|seconds/ )
			if( result =~ /does not have a|already missing/ )
				fput "kill ##{target.id}"
			end
		end
	end
	change_stance('defensive')
end

def cmd_kill target
	return if target.status =~ /dead|gone/

	change_stance('offensive')
	fput "kill ##{target.id}"
	change_stance('defensive')
end

def cmd_mstrike
	if( !Spell[9005].active? && Skills.multiopponentcombat >= 15 && GameObj.npcs.all? { |i| i.noun !~ /nest/i } )
		if( GameObj.npcs.size > 1 )
			change_stance('offensive')
			fput "mstrike"
			change_stance('defensive')
		else
			change_stance('offensive')
			fput "kill"
			change_stance('defensive')
		end
	else
		kill
	end
end

def cmd_vibration target
	return if target.status =~ /dead|gone/
	return unless Spell[1002].known? and Spell[1002].affordable?
	return if checkmana <= 45

	waitcastrt?
	Spell[1002].cast "##{target.id}"
	waitcastrt?
end

def cmd_bone target
	return if target.status =~ /dead|gone/
	return unless Spell[1106].known? and Spell[1106].affordable?

	waitcastrt?
	Spell[1106].cast "##{target.id}"
	change_stance "defensive"
	waitcastrt?
end

def cmd_empathiclink target
	return if target.status =~ /dead|gone/
	return unless Spell[1117].known? and Spell[1117].affordable?
	return if checkmana <= 45
	return if GameObj.npcs.count { |npc| is_valid_target npc } < 4

	waitcastrt?
	Spell[1117].cast "##{target.id}"
	change_stance('guarded')
	waitcastrt?
end

def cmd_bind target
  #Attempts to bind all monsters which are alive and unbound, while maintaining 50 mana
	return unless Spell[214].known?

	GameObj.npcs.each { |npc|
		if npc.type =~ @target_types and npc.status !~ /frozen|dead|gone/i and checkmana > 50
			Spell[214].cast "##{npc.id}"
		end
	}
end

def find_priority_target valid_targets
	target = nil
	pri = nil
	valid_targets.each_with_index {|list, ii|
		if list.empty?
			next
		end
		target_regex = Regexp.new list.join("|")
		target = GameObj.npcs.find { |npc| is_valid_target npc, valid_targets: target_regex }
		pri = ii if target
		break if target
	}
  [target, pri]
end

def find_any_target
	target = GameObj.npcs.find { |npc|
		if npc.type =~ /passive npc|pet|familiar/
			next
		end
		fput "target ##{npc.id}"
		line = get until line =~ /^Usage|^You are now (?<success>targeting)|^You do not have a target\.|You can only target creatures and players\.|You can't target|^Could not find a valid target\./
		$~[:success]
	}
end

def cmd_sympathy
  #Cast sympathy if enough creatures are present
  sympathy = Spell[1120]
  return unless sympathy.known? and sympathy.affordable?
  return if GameObj.npcs.count { |npc| is_valid_target npc, target_types:/bandit/ } < 6
  sympathy.cast
end

def cmd_sweep target
	return if target.status =~ /dead|gone/
	return if target.status =~ /kneel|sit|lying|stunned/
	return if(hiding?)
	return if checkstamina <= 45

	change_stance('offensive')
	fput "cman sweep ##{target.id}"
	change_stance('defensive')

end

def cmd_feint target
	return if target.status =~ /dead|gone/
	return if target.status =~ /kneel|sit|lying|stunned/
	return if(hiding?)
	return if checkstamina <= 45

	change_stance('offensive')
	fput "cman feint ##{target.id}"
	change_stance('defensive')

end

def cmd_loot
	#Loot dead bodies
	#Must have at least one creature present
	return if GameObj.npcs.count { |npc| npc.type =~ @target_types } == 0
	#All NPCs must be non-aggressive, or dead
	return unless GameObj.npcs.all? { |npc| npc.type !~ @target_types || npc.status =~ /dead|gone/ }
	start_script "sloot"
	wait_while{running?('sloot')}
end

def print_target_priority priority
	#Prints out a single priority level
	targets = nil
	@vars_mutex.synchronize {
		targets = Vars[@script_name]['targets'].fetch(priority, nil).dup
	}
	if !targets
		respond "Priority #{priority} not found!"
		return
	end

	respond "Targets at priority #{priority}: #{targets}"
end

def print_all_targets
	@vars_mutex.synchronize {
		if Vars[@script_name]['targets'].empty?
			respond "No targets defined!"
		else
			Vars[@script_name]['targets'].each_with_index { |targets, ii|
				respond "#{ii+1}) #{targets}"
			}
		end
	}
end

def execute_commands
	#This defines the core hunting loop for all characters, executing a sequence of functions from a specified profile
	target = nil
	target_pri = nil
	last_profile = nil
	select_target = false
	cmds = []
	loop {
		#Rebuild list of commands each loop, for on-the-fly profile switches
		profile = []
		valid_targets = nil
		use_target_list = true
		@vars_mutex.synchronize {
			current = Vars[@script_name]['current']
			profile = Vars[@script_name]['profiles'][current].dup
			valid_targets = Vars[@script_name]['targets'].dup
			use_target_list = !Vars[@script_name]['use_target_lists']
		}

		if profile != last_profile
			select_target = false
			cmds = profile.collect { |cmd|
				m = method(cmd)
				select_target = select_target || m.arity == 1
				m
			}
			last_profile = profile
		end

		deltaT = 0.0
		#Not poaching, valid commands
		if !poaching? && cmds
			#Only look for a target if we need it
			if select_target && use_target_list
				new_target, new_pri = find_priority_target valid_targets
				if new_target && (!target || target.status =~ /dead|gone/ || !target_pri || new_pri < target_pri)
					target = new_target
					target_pri = new_pri
					fput "target ##{target.id}"
				end
			elsif select_target && (!target || target.status =~ /dead|gone/)
				target = find_any_target
			end

			startTime = Time.now
			#Executes each command in order, providing target if requested
			cmds.each{ |cmd|
				if cmd.parameters[0].include?(:target)
					if target
						cmd.call target
					end
				else
					cmd.call
				end
			}
			deltaT = (Time.now - startTime)
		end
		if deltaT < 0.5
			# Cap at 0.5s to not spam commands too fast
			sleep 0.5 - deltaT
		end
	}
end

#This is the list of all commands which can be used in profiles. This is to ensure that incorrectly named or unexpected functions don't get injected
@all_cmds = ['cmd_gos', 'cmd_power', 'cmd_loot', 'cmd_voln', 'cmd_vibration', 'cmd_kill', 'cmd_smastery', 'cmd_camo', 'cmd_hide', 'cmd_ambush', 'cmd_swarm', 'cmd_weed', 'cmd_col', 'stand', 'cmd_bone', 'cmd_empathiclink', 'cmd_bind', 'cmd_sympathy', 'cmd_mstrike', 'cmd_sweep', 'cmd_feint', 'cmd_spike']

#NOTE: At this point, only one thread is messing with these vars, so there's no need to mutex.
#Sets up basic configuration structures
Vars[@script_name] ||= Hash.new
Vars[@script_name]['profiles'] ||= Hash.new
Vars[@script_name]['current'] ||= 'default'
Vars[@script_name]['targets'] ||= []
Vars[@script_name]['use_target_lists'] = true

#Sets up default profiles for current characters, can be deleted once configured
if !Vars[@script_name]['profiles'].include? 'default'
  case name
  when "Alyssea"
    Vars[@script_name]['profiles']['default'] = ['cmd_gos', 'stand', 'cmd_power', 'cmd_loot']
  when "Archaeron"
    Vars[@script_name]['profiles']['default'] = ['cmd_voln', 'stand', 'cmd_feint' , 'cmd_vibration', 'cmd_kill']
  when "Predest"
    Vars[@script_name]['profiles']['default'] = ['cmd_gos', 'stand', 'cmd_smastery', 'cmd_sweep', 'cmd_weed', 'cmd_swarm', 'cmd_camo', 'cmd_hide', 'cmd_ambush']
  when "Ericos"
    Vars[@script_name]['profiles']['default'] = ['cmd_col', 'stand']
  end
end

@cmd_string = "#{$lich_char}#{@script_name}"

def handle_profile_cmds line
	#Processes profile commands
	case line
	when /profile list/
		#List profiles for the current character
		respond "Profiles available for #{name}:"
		@vars_mutex.synchronize {
			Vars[@script_name]['profiles'].keys.each {|profile|
				respond "* #{profile}"
			}
		}
	when /profile set (?<pname>\w+)=(?<cmds>[\w, ]+)/
		#Sets a profile to a string of commands
		cmds = []
		pname = $~[:pname]
		$~[:cmds].split(",").each { |cmd|
			cmd = cmd.strip
			if !@all_cmds.include? cmd
				respond "#{cmd} not a recognized command"
				break
			end
			cmds.push(cmd)
		}
		@vars_mutex.synchronize { Vars[@script_name]['profiles'][pname] = cmds }
		respond "Added profile #{pname} for #{name}"
	when /profile rm (?<pname>\w+)/
		#Removes a profile
		pname = $~[:pname]
		@vars_mutex.synchronize { Vars[@script_name]['profiles'].delete pname }
		respond "Removed profile #{pname} for #{name}"
	when /profile info (?<pname>\w+)/
		pname = $~[:pname]
		@vars_mutex.synchronize {
			if Vars[@script_name]['profiles'].include? pname
				respond "#{pname}=#{Vars[@script_name]['profiles'][pname].join(",")}"
			else
				respond "#{pname} not a profile for #{name}"
			end
		}
	when /profile current/
		if line =~ /current (?<set>\w+)/ && $~[:set]
			@vars_mutex.synchronize { Vars[@script_name]['current'] = $~[:set] }
		end
		respond "#{name} is using profile #{Vars[@script_name]['current']}"
	when /profile help/
		respond "Usage: #{@cmd_string} profile [options]"
		respond ""
		respond "Options:"
		respond "  list: Lists all known profiles for the current character"
		respond "  set [profile=cmds]: Sets the named profile to the comma separated list of commands given"
		respond "  rm profile_name: Deletes named profile"
		respond "  info profile_name: Lists the command sequence of a given profile"
		respond "  current [profile_name]: Lists the current profile, or sets it to the given name if specified"
		respond "  help: Prints this help message"
	end
end

def handle_target_cmds line
	case line
	when /targets list (?<pri>\d+)?/
		if $~[:pri]
			print_target_priority $~[:pri].to_i
		else
			print_all_targets
		end
	when /targets rm (?<pri>\d+) (?<name>[\w ]+)/
		pri = $~[:pri].to_i
		if pri < 0 || pri > 100
			respond "Priority must be within [0, 100]"
			return
		end

		@vars_mutex.synchronize {
			if Vars[@script_name]['targets'].length <= pri
				respond "No targets at priority #{pri}"
			else
				Vars[@script_name]['targets'][pri].delete_if {|tgt| tgt == $~[:name] }
				respond "Removed #{$~[:name]} from priority #{pri}"
			end
		}
	when /targets add (?<pri>\d+) (?<name>[\w ]+)/
		pri = $~[:pri].to_i

		if pri < 0 || pri > 100
			respond "Priority must be within [0, 100]"
			return
		end

		@vars_mutex.synchronize {
			while Vars[@script_name]['targets'].length <= pri + 1
				Vars[@script_name]['targets'].push Array.new()
			end

			Vars[@script_name]['targets'][pri].push $~[:name]
		}
		respond "Added #{$~[:name]} to priority #{pri}"
  when /targets all=?(?<flag>on|off)?/
    if $~[:flag]
      flag = $~[:flag] =~ /off/i
      @vars_mutex.synchronize { Vars[@script_name]['use_target_lists'] = flag }
    end

    if Vars[@script_name]['use_target_lists']
      respond "Using targetting lists"
    else
      respond "Targetting any enemy in sight"
    end
	when /targets help/
		respond "Usage: #{cmd_string} targets [options]"
		respond "  Handles the list of valid targets and priorities for hunting"
		respond ""
		respond "Options: "
		respond "  list [$priority]: Prints all creatures, or all creatures of a specified priority level"
		respond "  add $priority $name: Adds $name to $priority level"
		respond "  rm $priority $name: Removes $name from $priority level"
	end
end

#Thread for accepting commands during operation
command_hook = proc { |line|
	case line
	when /#{@cmd_string} update_group/
		#Updates group for poaching tests
		@group_mutex.synchronize { @current_group = get_current_group }
		nil
	when /#{@cmd_string} commands/
		respond "Available commands: #{@all_cmds}"
		nil
	when /#{@cmd_string} profile/
		handle_profile_cmds line
		nil
	when /#{@cmd_string} targets/
		handle_target_cmds line
		nil
	else
		line
	end
}

UpstreamHook.add @cmd_string, command_hook
before_dying {UpstreamHook.remove @cmd_string}

#Valid targets are listed here on a per-character basis
#FIXME: These valid_target lists no longer do anything
valid_targets = //
case name
when 'Alyssea'
  valid_targets = /(warrior|mercenary|puma|warfarer|rogue|theif|thug|bandit|outlaw|brigand|marauder|highwayman|robber|mugger|janissary|herald|griffin|scout|adept|lurk|fanatic|monstrosity|shaper|sentinel|lesser minotaur|krag yeti|minotaur warrior|minotaur magus|jarl|krynch|elder|being|goleras|moulis|shrickhen|champion|seer|initiate|dogmatist|hierophant|supplicant|raving lunatic|naisirc|seraceris|vvrael witch|caedera|csetairi|vvrael warlock|greater krynch|earth elemental|vaespilon|n'ecare)/i
when 'Archaeron'
	valid_targets = /(rat|golem|minotaur magus|minotaur warrior|minotaur magi|krag yeti|krag dweller|lesser minotaur|soldier|thrak|manticore|grey orc|crystal golem|forest troll|hill troll|war troll|warrior|mercenary|puma|warfarer|rogue|theif|thug|bandit|outlaw|brigand|marauder|highwayman|robber|mugger|banshee|troll king|dweller|harbinger|elemental|seeker|ice golem|sabre-tooth tiger|Shaman|Mystic|Mastiff|stone giant|Jarl|Elder|stone troll|fire guardian|Krolvin dissembler|Krolvin|minotaur|witch|ranger|raider|soldier|fighter|hunter|archer|sorcerer|wizard|cleric|barbarian|mage|warrior|rogue|acolyte|skirmisher|adept|scout|scourge|sniper|dissembler|empath|guard|witch|warlock|sorceress|marauder|thief|tsark|golem|sprite|griffin|grifflet|yeti|dogmatist|hierophant|supplicant|farlook|boar|direbear|direwolf|viper|goleras|moulis|shrickhen|raving lunatic|naisirc|seraceris|vvrael witch|caedera|csetairi|vvrael warlock|greater krynch|earth elemental)/i
when 'Predest'
	valid_targets = /(rat|golem|minotaur magus|minotaur warrior|minotaur magi|krag yeti|krag dweller|lesser minotaur|soldier|thrak|manticore|grey orc|crystal golem|forest troll|hill troll|war troll|warrior|mercenary|puma|warfarer|rogue|theif|thug|bandit|outlaw|brigand|marauder|highwayman|robber|mugger|banshee|troll king|dweller|harbinger|elemental|seeker|ice golem|sabre-tooth tiger|Shaman|Mystic|Mastiff|stone giant|Jarl|Elder|stone troll|fire guardian|Krolvin dissembler|Krolvin|minotaur|witch|ranger|raider|soldier|fighter|hunter|archer|sorcerer|wizard|cleric|barbarian|mage|warrior|rogue|acolyte|skirmisher|adept|scout|scourge|sniper|dissembler|empath|guard|witch|warlock|sorceress|marauder|thief|tsark|golem|sprite|griffin|grifflet|yeti|dogmatist|hierophant|supplicant|farlook|boar|direbear|direwolf|viper|goleras|moulis|shrickhen|raving lunatic|vvrael witch|caedera|csetairi|vvrael warlock|greater krynch|earth elemental)/i
#when 'Ericos' #This isn't here, since Ericos never targets via this script
end

execute_commands
